{
  "version": 3,
  "sources": ["../../../packages/components/descriptions/src/token.ts", "../../../packages/components/descriptions/src/descriptions-cell.ts", "../../../packages/components/descriptions/src/descriptions-row.ts", "../../../packages/components/descriptions/src/descriptions-row.vue", "../../../packages/components/descriptions/src/description.ts", "../../../packages/components/descriptions/src/description.vue", "../../../packages/components/descriptions/src/description-item.ts", "../../../packages/components/descriptions/index.ts"],
  "sourcesContent": ["import type { InjectionKey } from 'vue'\nimport type { IDescriptionsInject } from './descriptions.type'\n\nexport const descriptionsKey: InjectionKey<IDescriptionsInject> =\n  Symbol('elDescriptions')\n", "import { defineComponent, h, inject, withDirectives } from 'vue'\nimport { isNil } from 'lodash-unified'\nimport { addUnit, getNormalizedProps } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { descriptionsKey } from './token'\nimport type { DirectiveArguments, PropType, VNode } from 'vue'\n\nimport type {\n  IDescriptionsInject,\n  IDescriptionsItemInject,\n} from './descriptions.type'\nimport type { DescriptionItemVNode } from './description-item'\n\nexport default defineComponent({\n  name: 'ElDescriptionsCell',\n  props: {\n    cell: {\n      type: Object as PropType<DescriptionItemVNode>,\n    },\n    tag: {\n      type: String,\n      default: 'td',\n    },\n    type: {\n      type: String,\n    },\n  },\n  setup() {\n    const descriptions = inject(descriptionsKey, {} as IDescriptionsInject)\n\n    return {\n      descriptions,\n    }\n  },\n  render() {\n    const item = getNormalizedProps(\n      this.cell as VNode\n    ) as IDescriptionsItemInject\n\n    const directives = (this.cell?.dirs || []).map((dire) => {\n      const { dir, arg, modifiers, value } = dire\n      return [dir, value, arg, modifiers]\n    }) as DirectiveArguments\n\n    const { border, direction } = this.descriptions\n    const isVertical = direction === 'vertical'\n    const label = this.cell?.children?.label?.() || item.label\n    const content = this.cell?.children?.default?.()\n    const span = item.span\n    const align = item.align ? `is-${item.align}` : ''\n    const labelAlign = item.labelAlign ? `is-${item.labelAlign}` : '' || align\n    const className = item.className\n    const labelClassName = item.labelClassName\n    const style = {\n      width: addUnit(item.width),\n      minWidth: addUnit(item.minWidth),\n    }\n    const ns = useNamespace('descriptions')\n\n    switch (this.type) {\n      case 'label':\n        return withDirectives(\n          h(\n            this.tag,\n            {\n              style,\n              class: [\n                ns.e('cell'),\n                ns.e('label'),\n                ns.is('bordered-label', border),\n                ns.is('vertical-label', isVertical),\n                labelAlign,\n                labelClassName,\n              ],\n              colSpan: isVertical ? span : 1,\n            },\n            label\n          ),\n          directives\n        )\n      case 'content':\n        return withDirectives(\n          h(\n            this.tag,\n            {\n              style,\n              class: [\n                ns.e('cell'),\n                ns.e('content'),\n                ns.is('bordered-content', border),\n                ns.is('vertical-content', isVertical),\n                align,\n                className,\n              ],\n              colSpan: isVertical ? span : span * 2 - 1,\n            },\n            content\n          ),\n          directives\n        )\n      default:\n        return withDirectives(\n          h(\n            'td',\n            {\n              style,\n              class: [ns.e('cell'), align],\n              colSpan: span,\n            },\n            [\n              !isNil(label)\n                ? h(\n                    'span',\n                    {\n                      class: [ns.e('label'), labelClassName],\n                    },\n                    label\n                  )\n                : undefined,\n              h(\n                'span',\n                {\n                  class: [ns.e('content'), className],\n                },\n                content\n              ),\n            ]\n          ),\n          directives\n        )\n    }\n  },\n})\n", "import { buildProps, definePropType } from '@element-plus/utils'\n\nimport type { DescriptionItemVNode } from './description-item'\n\nexport const descriptionsRowProps = buildProps({\n  row: {\n    type: definePropType<DescriptionItemVNode[]>(Array),\n    default: () => [],\n  },\n} as const)\n", "<template>\n  <template v-if=\"descriptions.direction === 'vertical'\">\n    <tr>\n      <template v-for=\"(cell, _index) in row\" :key=\"`tr1-${_index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"th\" type=\"label\" />\n      </template>\n    </tr>\n    <tr>\n      <template v-for=\"(cell, _index) in row\" :key=\"`tr2-${_index}`\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n    </tr>\n  </template>\n  <tr v-else>\n    <template v-for=\"(cell, _index) in row\" :key=\"`tr3-${_index}`\">\n      <template v-if=\"descriptions.border\">\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"label\" />\n        <el-descriptions-cell :cell=\"cell\" tag=\"td\" type=\"content\" />\n      </template>\n      <el-descriptions-cell v-else :cell=\"cell\" tag=\"td\" type=\"both\" />\n    </template>\n  </tr>\n</template>\n\n<script lang=\"ts\" setup>\nimport { inject } from 'vue'\n\nimport ElDescriptionsCell from './descriptions-cell'\nimport { descriptionsKey } from './token'\nimport { descriptionsRowProps } from './descriptions-row'\n\nimport type { IDescriptionsInject } from './descriptions.type'\n\ndefineOptions({\n  name: 'ElDescriptionsRow',\n})\n\ndefineProps(descriptionsRowProps)\n\nconst descriptions = inject(descriptionsKey, {} as IDescriptionsInject)\n</script>\n", "import { buildProps } from '@element-plus/utils'\nimport { useSizeProp } from '@element-plus/hooks'\n\nimport type Description from './description.vue'\n\nexport const descriptionProps = buildProps({\n  /**\n   * @description with or without border\n   */\n  border: {\n    type: Boolean,\n    default: false,\n  },\n  /**\n   * @description numbers of `Descriptions Item` in one line\n   */\n  column: {\n    type: Number,\n    default: 3,\n  },\n  /**\n   * @description direction of list\n   */\n  direction: {\n    type: String,\n    values: ['horizontal', 'vertical'],\n    default: 'horizontal',\n  },\n  /**\n   * @description size of list\n   */\n  size: useSizeProp,\n  /**\n   * @description title text, display on the top left\n   */\n  title: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description extra text, display on the top right\n   */\n  extra: {\n    type: String,\n    default: '',\n  },\n} as const)\n\nexport type DescriptionInstance = InstanceType<typeof Description>\n", "<template>\n  <div :class=\"descriptionKls\">\n    <div\n      v-if=\"title || extra || $slots.title || $slots.extra\"\n      :class=\"ns.e('header')\"\n    >\n      <div :class=\"ns.e('title')\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div :class=\"ns.e('extra')\">\n        <slot name=\"extra\">{{ extra }}</slot>\n      </div>\n    </div>\n\n    <div :class=\"ns.e('body')\">\n      <table :class=\"[ns.e('table'), ns.is('bordered', border)]\">\n        <tbody>\n          <template v-for=\"(row, _index) in getRows()\" :key=\"_index\">\n            <el-descriptions-row :row=\"row\" />\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, useSlots } from 'vue'\nimport { flattedChildren } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useFormSize } from '@element-plus/components/form'\nimport ElDescriptionsRow from './descriptions-row.vue'\nimport { descriptionsKey } from './token'\nimport { descriptionProps } from './description'\n\nimport type { IDescriptionsInject } from './descriptions.type'\nimport type { DescriptionItemVNode } from './description-item'\n\ndefineOptions({\n  name: 'ElDescriptions',\n})\n\nconst props = defineProps(descriptionProps)\n\nconst ns = useNamespace('descriptions')\n\nconst descriptionsSize = useFormSize()\n\nconst slots = useSlots()\n\nprovide(descriptionsKey, props as IDescriptionsInject)\n\nconst descriptionKls = computed(() => [ns.b(), ns.m(descriptionsSize.value)])\n\nconst filledNode = (\n  node: DescriptionItemVNode,\n  span: number,\n  count: number,\n  isLast = false\n) => {\n  if (!node.props) {\n    node.props = {}\n  }\n  if (span > count) {\n    node.props.span = count\n  }\n  if (isLast) {\n    // set the last span\n    node.props.span = span\n  }\n  return node\n}\n\nconst getRows = () => {\n  if (!slots.default) return []\n\n  const children = flattedChildren(slots.default()).filter(\n    (node): node is DescriptionItemVNode =>\n      (node as any)?.type?.name === 'ElDescriptionsItem'\n  )\n  const rows: DescriptionItemVNode[][] = []\n  let temp: DescriptionItemVNode[] = []\n  let count = props.column\n  let totalSpan = 0 // all spans number of item\n\n  children.forEach((node, index) => {\n    const span = node.props?.span || 1\n\n    if (index < children.length - 1) {\n      totalSpan += span > count ? count : span\n    }\n\n    if (index === children.length - 1) {\n      // calculate the last item span\n      const lastSpan = props.column - (totalSpan % props.column)\n      temp.push(filledNode(node, lastSpan, count, true))\n      rows.push(temp)\n      return\n    }\n\n    if (span < count) {\n      count -= span\n      temp.push(node)\n    } else {\n      temp.push(filledNode(node, span, count))\n      rows.push(temp)\n      count = props.column\n      temp = []\n    }\n  })\n\n  return rows\n}\n</script>\n", "import { defineComponent } from 'vue'\nimport { buildProps } from '@element-plus/utils'\n\nimport type { ExtractPropTypes, Slot, VNode } from 'vue'\n\nconst descriptionItemProps = buildProps({\n  /**\n   * @description label text\n   */\n  label: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description colspan of column\n   */\n  span: {\n    type: Number,\n    default: 1,\n  },\n  /**\n   * @description column width, the width of the same column in different rows is set by the max value (If no `border`, width contains label and content)\n   */\n  width: {\n    type: [String, Number],\n    default: '',\n  },\n  /**\n   * @description column minimum width, columns with `width` has a fixed width, while columns with `min-width` has a width that is distributed in proportion (If no`border`, width contains label and content)\n   */\n  minWidth: {\n    type: [String, Number],\n    default: '',\n  },\n  /**\n   * @description column content alignment (If no `border`, effective for both label and content)\n   */\n  align: {\n    type: String,\n    default: 'left',\n  },\n  /**\n   * @description column label alignment, if omitted, the value of the above `align` attribute will be applied (If no `border`, please use `align` attribute)\n   */\n  labelAlign: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description column content custom class name\n   */\n  className: {\n    type: String,\n    default: '',\n  },\n  /**\n   * @description column label custom class name\n   */\n  labelClassName: {\n    type: String,\n    default: '',\n  },\n})\nconst DescriptionItem = defineComponent({\n  name: 'ElDescriptionsItem',\n  props: descriptionItemProps,\n})\n\nexport default DescriptionItem\n\ntype DescriptionItemProps = ExtractPropTypes<typeof descriptionItemProps>\nexport type DescriptionItemVNode = VNode & {\n  children: { [name: string]: Slot } | null\n  props: Partial<DescriptionItemProps> | null\n}\n", "import { withInstall, withNoopInstall } from '@element-plus/utils'\n\nimport Descriptions from './src/description.vue'\nimport DescriptionsItem from './src/description-item'\n\nexport const ElDescriptions = withInstall(Descriptions, {\n  DescriptionsItem,\n})\n\nexport const ElDescriptionsItem = withNoopInstall(DescriptionsItem)\n\nexport default ElDescriptions\n\nexport * from './src/description'\n"],
  "mappings": "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",
  "names": ["DescriptionsItem"]
}
