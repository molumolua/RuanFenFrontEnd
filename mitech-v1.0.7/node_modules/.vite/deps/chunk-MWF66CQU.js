import {
  useFormSize
} from "./chunk-VPYMHN7Y.js";
import {
  _export_sfc,
  buildProps,
  componentSizes,
  isUndefined,
  useNamespace,
  withInstall
} from "./chunk-W5JDI3O2.js";
import {
  computed2 as computed,
  createBlock,
  defineComponent,
  normalizeClass,
  normalizeStyle,
  openBlock,
  renderSlot,
  resolveDynamicComponent,
  unref,
  withCtx
} from "./chunk-HMQ5RUGX.js";

// node_modules/element-plus/es/components/text/src/text.mjs
var textProps = buildProps({
  type: {
    type: String,
    values: ["primary", "success", "info", "warning", "danger", ""],
    default: ""
  },
  size: {
    type: String,
    values: componentSizes,
    default: ""
  },
  truncated: {
    type: Boolean
  },
  lineClamp: {
    type: [String, Number]
  },
  tag: {
    type: String,
    default: "span"
  }
});

// node_modules/element-plus/es/components/text/src/text2.mjs
var __default__ = defineComponent({
  name: "ElText"
});
var _sfc_main = defineComponent({
  ...__default__,
  props: textProps,
  setup(__props) {
    const props = __props;
    const textSize = useFormSize();
    const ns = useNamespace("text");
    const textKls = computed(() => [
      ns.b(),
      ns.m(props.type),
      ns.m(textSize.value),
      ns.is("truncated", props.truncated),
      ns.is("line-clamp", !isUndefined(props.lineClamp))
    ]);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
        class: normalizeClass(unref(textKls)),
        style: normalizeStyle({ "-webkit-line-clamp": _ctx.lineClamp })
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "style"]);
    };
  }
});
var Text = _export_sfc(_sfc_main, [["__file", "text.vue"]]);

// node_modules/element-plus/es/components/text/index.mjs
var ElText = withInstall(Text);

export {
  textProps,
  ElText
};
//# sourceMappingURL=chunk-MWF66CQU.js.map
