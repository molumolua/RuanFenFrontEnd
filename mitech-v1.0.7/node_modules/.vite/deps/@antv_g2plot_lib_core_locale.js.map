{
  "version": 3,
  "sources": ["../../@antv/g2plot/src/utils/invariant.ts", "../../@antv/g2plot/src/utils/pick.ts", "../../@antv/g2plot/src/utils/data.ts", "../../@antv/g2plot/src/utils/deep-assign.ts", "../../@antv/g2plot/src/utils/dom.ts", "../../@antv/g2plot/src/utils/flow.ts", "../../@antv/g2plot/src/utils/geometry.ts", "../../@antv/g2plot/src/utils/kebab-case.ts", "../../@antv/g2plot/src/utils/label.ts", "../../@antv/g2plot/src/utils/context.ts", "../../@antv/g2plot/src/utils/measure-text.ts", "../../@antv/g2plot/src/utils/number.ts", "../../@antv/g2plot/src/utils/padding.ts", "../../@antv/g2plot/src/utils/path.ts", "../../@antv/g2plot/src/utils/statistic.ts", "../../@antv/g2plot/src/utils/template.ts", "../../@antv/g2plot/src/utils/view.ts", "../../@antv/g2plot/src/utils/index.ts", "../../@antv/g2plot/src/core/global.ts", "../../@antv/g2plot/src/core/locale.ts"],
  "sourcesContent": ["/**\n * Simplified from https://github.com/zertosh/invariant.\n */\n\nexport enum LEVEL {\n  ERROR = 'error',\n  WARN = 'warn',\n  INFO = 'log',\n}\n\nconst BRAND = 'AntV/G2Plot';\n\n/**\n * 获取错误消息\n * @param format\n * @param args\n */\nfunction getMessage(format: string, ...args: any[]): string {\n  let argIndex = 0;\n  return `${BRAND}: ${format.replace(/%s/g, (): string => `${args[argIndex++]}`)}`;\n}\n\n/**\n * invariant error\n * @param condition\n * @param format\n * @param args\n */\nexport function invariant(condition: boolean, format: string, ...args: any[]): void {\n  if (!condition) {\n    const error = new Error(getMessage(format, ...args));\n    error.name = BRAND;\n    // error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\n/**\n * 打印语句\n * @param level\n * @param condition\n * @param format\n * @param args\n */\nexport function log(level: LEVEL, condition: boolean, format, ...args: any[]): void {\n  if (!condition) {\n    console[level](getMessage(format, ...args));\n  }\n}\n", "/**\n * 类似 lodash.pick 的方法\n * @param obj\n * @param keys\n */\nexport function pick(obj: any, keys: string[]): object {\n  const r = {};\n\n  if (obj !== null && typeof obj === 'object') {\n    keys.forEach((key: string) => {\n      const v = obj[key];\n      if (v !== undefined) {\n        r[key] = v;\n      }\n    });\n  }\n  return r;\n}\n", "import { filter, get, isNumber } from '@antv/util';\nimport { Data, Datum, Meta, Options } from '../types';\nimport { Node, NodeLinkData } from '../types/relation-data';\nimport { LEVEL, log } from './invariant';\nimport { pick } from './pick';\n\n/**\n * 查看数据是否是全负数、或者全正数\n * @param data\n * @param field\n */\nexport function adjustYMetaByZero(data: Data, field: string): Meta {\n  if (!data) return {};\n  // 过滤出数字数据\n  const numberData = data.filter((datum: Datum) => {\n    const v = get(datum, [field]);\n    return isNumber(v) && !isNaN(v);\n  });\n\n  const gtZero = numberData.every((datum: Datum) => get(datum, [field]) >= 0);\n  const ltZero = numberData.every((datum: Datum) => get(datum, [field]) <= 0);\n\n  // 目前是增量更新，对 { min: 0, max: undefined } 进行 update({ max: 0 }) 会得到 { min: 0, max: 0 }\n  if (gtZero) {\n    return { min: 0 };\n  }\n  if (ltZero) {\n    return { max: 0 };\n  }\n  return {};\n}\n\n/**\n * 转换数据格式为带有节点与边的数据格式\n * @param data\n * @param sourceField\n * @param targetField\n * @param weightField\n * @param rawFields 存放一些原数据\n */\nexport function transformDataToNodeLinkData(\n  data: Data,\n  sourceField: string,\n  targetField: string,\n  weightField: string,\n  rawFields: string[] = []\n): NodeLinkData {\n  if (!Array.isArray(data)) {\n    return {\n      nodes: [],\n      links: [],\n    };\n  }\n\n  //   const nodes = [];\n  const links = [];\n  // 先使用对象方式存储\n  const nodesMap: Record<string, Node> = {};\n  let nodesIndex = -1;\n  // 数组变换成 chord layout 的数据结构\n  data.forEach((datum: Datum) => {\n    const source = datum[sourceField];\n    const target = datum[targetField];\n    const weight = datum[weightField];\n\n    const rawData = pick(datum, rawFields);\n\n    // source node\n    if (!nodesMap[source]) {\n      nodesMap[source] = {\n        id: ++nodesIndex,\n        name: source,\n        ...rawData,\n      };\n    }\n    if (!nodesMap[target]) {\n      nodesMap[target] = {\n        id: ++nodesIndex,\n        name: target,\n        ...rawData,\n      };\n    }\n    // links\n    links.push({\n      source: nodesMap[source].id,\n      target: nodesMap[target].id,\n      // sourceName: source,\n      // targetName: target,\n      value: weight,\n      ...rawData,\n    });\n  });\n  return {\n    // 需要按照 id 的顺序\n    nodes: Object.values(nodesMap).sort((a, b) => a.id - b.id),\n    links,\n  };\n}\n\n/**\n * 处理不合法的数据(过滤 非数值型 和 NaN，保留 null)\n * @param data\n * @param angleField\n */\nexport function processIllegalData(data: Options['data'], field: string) {\n  const processData = filter(data, (d) => {\n    const v = d[field];\n    return v === null || (typeof v === 'number' && !isNaN(v));\n  });\n\n  // 打印异常数据情况\n  log(LEVEL.WARN, processData.length === data.length, 'illegal data existed in chart data.');\n\n  return processData;\n}\n", "const MAX_MIX_LEVEL = 5; // 最大比对层级\n\nconst toString = {}.toString;\n\n// 类型检测\nconst isType = (value: any, type: string): boolean => toString.call(value) === '[object ' + type + ']';\n\nconst isArray = (value: any): value is Array<any> => {\n  return isType(value, 'Array');\n};\n\nconst isObjectLike = (value: any): value is object => {\n  /**\n   * isObjectLike({}) => true\n   * isObjectLike([1, 2, 3]) => true\n   * isObjectLike(Function) => false\n   */\n  return typeof value === 'object' && value !== null;\n};\n\nconst isPlainObject = (value: any): value is object => {\n  /**\n   * isObjectLike(new Foo) => false\n   * isObjectLike([1, 2, 3]) => false\n   * isObjectLike({ x: 0, y: 0 }) => true\n   */\n  if (!isObjectLike(value) || !isType(value, 'Object')) {\n    return false;\n  }\n  let proto = value;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(value) === proto;\n};\n\n/***\n * @param {any} dist\n * @param {any} src\n * @param {number} level 当前层级\n * @param {number} maxLevel 最大层级\n */\nconst deep = (dist, src, level?, maxLevel?) => {\n  level = level || 0;\n  maxLevel = maxLevel || MAX_MIX_LEVEL;\n  for (const key in src) {\n    if (Object.prototype.hasOwnProperty.call(src, key)) {\n      const value = src[key];\n      if (!value) {\n        // null 、 undefined 等情况直接赋值\n        dist[key] = value;\n      } else {\n        if (isPlainObject(value)) {\n          if (!isPlainObject(dist[key])) {\n            dist[key] = {};\n          }\n          if (level < maxLevel) {\n            deep(dist[key], value, level + 1, maxLevel);\n          } else {\n            // 层级过深直接赋值，性能问题\n            dist[key] = src[key];\n          }\n        } else if (isArray(value)) {\n          dist[key] = [];\n          dist[key] = dist[key].concat(value);\n        } else {\n          dist[key] = value;\n        }\n      }\n    }\n  }\n};\n\n/**\n * deepAssign 功能类似 deepMix\n * 不同点在于 deepAssign 会将 null undefined 等类型直接覆盖给 source\n * 详细参考： __tests__/unit/utils/deep-assign-spec.ts\n */\nexport const deepAssign = (rst: any, ...args: any[]) => {\n  for (let i = 0; i < args.length; i += 1) {\n    deep(rst, args[i]);\n  }\n  return rst;\n};\n", "import { Size } from '../types';\n\n/**\n * get the element's bounding size\n * @param ele dom element\n * @returns the element width and height\n */\nexport function getContainerSize(ele: HTMLElement): Size {\n  if (!ele) {\n    return { width: 0, height: 0 };\n  }\n  const style = getComputedStyle(ele);\n\n  return {\n    width:\n      (ele.clientWidth || parseInt(style.width, 10)) -\n      parseInt(style.paddingLeft, 10) -\n      parseInt(style.paddingRight, 10),\n    height:\n      (ele.clientHeight || parseInt(style.height, 10)) -\n      parseInt(style.paddingTop, 10) -\n      parseInt(style.paddingBottom, 10),\n  };\n}\n", "type FlowFunction<P> = (param: P) => P;\n\n/**\n * 类似 lodash.flow 的方法\n * @param flows\n */\nexport function flow<P>(...flows: FlowFunction<P>[]): FlowFunction<P> {\n  return (param: P) => {\n    return flows.reduce((result: P, f: FlowFunction<P>) => {\n      return f(result);\n    }, param);\n  };\n}\n", "import { Element, Geometry, View } from '@antv/g2';\nimport { get, reduce } from '@antv/util';\n\n/**\n * 在 View 中查找第一个指定 type 类型的 geometry\n * @param view\n * @param type\n */\nexport function findGeometry(view: View, type: string): Geometry {\n  return view.geometries.find((g: Geometry) => g.type === type);\n}\n\n/**\n * 获取 View 的 所有 elements\n */\nexport function getAllElements(view: View): Element[] {\n  return reduce(\n    view.geometries,\n    (r: Element[], geometry: Geometry) => {\n      return r.concat(geometry.elements);\n    },\n    []\n  );\n}\n\n/**\n * 递归获取 View 的 所有 elements, 包括 View 的子 View\n */\nexport function getAllElementsRecursively(view: View): Element[] {\n  if (get(view, ['views', 'length'], 0) <= 0) {\n    return getAllElements(view);\n  }\n\n  return reduce(\n    view.views,\n    (ele: Element[], subView: View) => {\n      return ele.concat(getAllElementsRecursively(subView));\n    },\n    getAllElements(view)\n  );\n}\n\n/**\n * 递归获取 View 的 所有 geometries, 包括 View 的子 View\n */\nexport function getAllGeometriesRecursively(view: View): Geometry[] {\n  if (get(view, ['views', 'length'], 0) <= 0) {\n    return view.geometries;\n  }\n\n  return reduce(\n    view.views,\n    (ele: Geometry[], subView: View) => {\n      return ele.concat(subView.geometries);\n    },\n    view.geometries\n  );\n}\n", "/**\n * @desc simple kebabCase like lodash\n *\n * kebabCase('fooBar'); => 'foo-bar'\n */\nexport function kebabCase(word: string) {\n  if (!word) {\n    return word;\n  }\n  const result = word.match(/(([A-Z]{0,1}[a-z]*[^A-Z])|([A-Z]{1}))/g);\n  return result.map((s: string) => s.toLowerCase()).join('-');\n}\n", "import { isType } from '@antv/util';\n/**\n * 兼容 v1 label formatter\n * @param labelOptions\n */\nexport function transformLabel(labelOptions: any) {\n  if (!isType(labelOptions, 'Object')) {\n    return labelOptions;\n  }\n  const label = { ...labelOptions };\n  if (label.formatter && !label.content) {\n    label.content = label.formatter;\n  }\n  return label;\n}\n", "let ctx: CanvasRenderingContext2D;\n\n/**\n * 获取 canvas context\n */\nexport function getCanvasContext() {\n  if (!ctx) {\n    ctx = document.createElement('canvas').getContext('2d');\n  }\n\n  return ctx;\n}\n", "import { isString, memoize, values } from '@antv/util';\nimport { getCanvasContext } from './context';\n\n/**\n * 计算文本在画布中的宽度\n * @param text 文本\n * @param font 字体\n */\nexport const measureTextWidth = memoize(\n  (text: string, font: any = {}): number => {\n    const { fontSize, fontFamily = 'sans-serif', fontWeight, fontStyle, fontVariant } = font;\n    const ctx = getCanvasContext();\n    // @see https://developer.mozilla.org/zh-CN/docs/Web/CSS/font\n    ctx.font = [fontStyle, fontWeight, fontVariant, `${fontSize}px`, fontFamily].join(' ');\n    const metrics = ctx.measureText(isString(text) ? text : '');\n    return metrics.width;\n  },\n  (text: string, font = {}) => [text, ...values(font)].join('')\n);\n", "/**\n * 是否真实的是数字\n * @param v\n */\nexport function isRealNumber(v: any) {\n  return typeof v === 'number' && !isNaN(v);\n}\n\n/**\n * @ignore\n * Determines whether between is\n * @param value\n * @param start\n * @param end\n * @returns true if between\n */\nexport function isBetween(value: number, start: number, end: number): boolean {\n  const min = Math.min(start, end);\n  const max = Math.max(start, end);\n\n  return value >= min && value <= max;\n}\n", "import { Types } from '@antv/g2';\nimport { isArray, isNumber } from '@antv/util';\n\n/**\n * 把 padding 转换成统一的数组写法\n * @param padding\n */\nexport function normalPadding(padding: number | number[] | 'auto'): [number, number, number, number] {\n  if (isNumber(padding)) {\n    return [padding, padding, padding, padding];\n  }\n  if (isArray(padding)) {\n    const length = padding.length;\n\n    if (length === 1) {\n      return [padding[0], padding[0], padding[0], padding[0]];\n    }\n    if (length === 2) {\n      return [padding[0], padding[1], padding[0], padding[1]];\n    }\n    if (length === 3) {\n      return [padding[0], padding[1], padding[2], padding[1]];\n    }\n    if (length === 4) {\n      return padding as [number, number, number, number];\n    }\n  }\n\n  return [0, 0, 0, 0];\n}\n\n/**\n * 获取调整的 appendPadding\n */\nexport function getAdjustAppendPadding(padding: Types.ViewAppendPadding, position = 'bottom', append = 25) {\n  const currentAppendPadding = normalPadding(padding);\n\n  const PADDING = [\n    position.startsWith('top') ? append : 0,\n    position.startsWith('right') ? append : 0,\n    position.startsWith('bottom') ? append : 0,\n    position.startsWith('left') ? append : 0,\n  ];\n  return [\n    currentAppendPadding[0] + PADDING[0],\n    currentAppendPadding[1] + PADDING[1],\n    currentAppendPadding[2] + PADDING[2],\n    currentAppendPadding[3] + PADDING[3],\n  ];\n}\n\n/**\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\n * @param array\n */\nexport function resolveAllPadding(paddings: Types.ViewPadding[]) {\n  // 先把数组里的 padding 全部转换成 normal\n  const normalPaddings = paddings.map((item) => normalPadding(item));\n  let finalPadding = [0, 0, 0, 0];\n  if (normalPaddings.length > 0) {\n    finalPadding = finalPadding.map((item, index) => {\n      // 有几个 padding 数组就遍历几次，累加\n      normalPaddings.forEach((d, i) => {\n        item += normalPaddings[i][index];\n      });\n      return item;\n    });\n  }\n  return finalPadding;\n}\n", "import { vec2 } from '@antv/matrix-util';\nimport { Point, Position } from '../types/common';\n\nexport function points2Path(points: Point[], isInCircle: boolean) {\n  const path = [];\n  if (points.length) {\n    path.push(['M', points[0].x, points[0].y]);\n    for (let i = 1, length = points.length; i < length; i += 1) {\n      const item = points[i];\n      path.push(['L', item.x, item.y]);\n    }\n    if (isInCircle) {\n      path.push(['Z']);\n    }\n  }\n  return path;\n}\n\n/**\n * @ignore\n * 计算光滑的贝塞尔曲线\n */\nexport const smoothBezier = (\n  points: Position[],\n  smooth: number,\n  isLoop: boolean,\n  constraint: Position[]\n): Position[] => {\n  const cps = [];\n  let prevPoint: Position;\n  let nextPoint: Position;\n  const hasConstraint = !!constraint;\n  let min: Position;\n  let max: Position;\n  if (hasConstraint) {\n    min = [Infinity, Infinity];\n    max = [-Infinity, -Infinity];\n\n    for (let i = 0, l = points.length; i < l; i++) {\n      const point = points[i];\n      min = vec2.min([0, 0], min, point) as [number, number];\n      max = vec2.max([0, 0], max, point) as [number, number];\n    }\n    min = vec2.min([0, 0], min, constraint[0]) as [number, number];\n    max = vec2.max([0, 0], max, constraint[1]) as [number, number];\n  }\n\n  for (let i = 0, len = points.length; i < len; i++) {\n    const point = points[i];\n    if (isLoop) {\n      prevPoint = points[i ? i - 1 : len - 1];\n      nextPoint = points[(i + 1) % len];\n    } else {\n      if (i === 0 || i === len - 1) {\n        cps.push(point);\n        continue;\n      } else {\n        prevPoint = points[i - 1];\n        nextPoint = points[i + 1];\n      }\n    }\n    let v: [number, number] = [0, 0];\n    v = vec2.sub(v, nextPoint, prevPoint) as [number, number];\n    v = vec2.scale(v, v, smooth) as [number, number];\n\n    let d0 = vec2.distance(point, prevPoint);\n    let d1 = vec2.distance(point, nextPoint);\n\n    const sum = d0 + d1;\n    if (sum !== 0) {\n      d0 /= sum;\n      d1 /= sum;\n    }\n\n    const v1 = vec2.scale([0, 0], v, -d0);\n    const v2 = vec2.scale([0, 0], v, d1);\n\n    let cp0 = vec2.add([0, 0], point, v1);\n    let cp1 = vec2.add([0, 0], point, v2);\n\n    if (hasConstraint) {\n      cp0 = vec2.max([0, 0], cp0, min);\n      cp0 = vec2.min([0, 0], cp0, max);\n      cp1 = vec2.max([0, 0], cp1, min);\n      cp1 = vec2.min([0, 0], cp1, max);\n    }\n\n    cps.push(cp0);\n    cps.push(cp1);\n  }\n\n  if (isLoop) {\n    cps.push(cps.shift());\n  }\n  return cps;\n};\n\n/**\n * @ignore\n * 贝塞尔曲线\n */\nexport function catmullRom2bezier(crp: number[], z: boolean, constraint: Position[]) {\n  const isLoop = !!z;\n  const pointList = [];\n  for (let i = 0, l = crp.length; i < l; i += 2) {\n    pointList.push([crp[i], crp[i + 1]]);\n  }\n\n  const controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n  const len = pointList.length;\n  const d1 = [];\n\n  let cp1: Position;\n  let cp2: Position;\n  let p: Position;\n\n  for (let i = 0; i < len - 1; i++) {\n    cp1 = controlPointList[i * 2];\n    cp2 = controlPointList[i * 2 + 1];\n    p = pointList[i + 1];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n\n  if (isLoop) {\n    cp1 = controlPointList[len];\n    cp2 = controlPointList[len + 1];\n    p = pointList[0];\n    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n  }\n  return d1;\n}\n\n/**\n * @ignore\n * 根据关键点获取限定了范围的平滑线\n */\nexport function getSplinePath(points: Point[], isInCircle?: boolean, constaint?: Position[]) {\n  const data = [];\n  const first = points[0];\n  let prePoint = null;\n  if (points.length <= 2) {\n    // 两点以内直接绘制成路径\n    return points2Path(points, isInCircle);\n  }\n  for (let i = 0, len = points.length; i < len; i++) {\n    const point = points[i];\n    if (!prePoint || !(prePoint.x === point.x && prePoint.y === point.y)) {\n      data.push(point.x);\n      data.push(point.y);\n      prePoint = point;\n    }\n  }\n  const constraint = constaint || [\n    // 范围\n    [0, 0],\n    [1, 1],\n  ];\n  const splinePath = catmullRom2bezier(data, isInCircle, constraint);\n  splinePath.unshift(['M', first.x, first.y]);\n  return splinePath;\n}\n", "import { IGroup, View } from '@antv/g2';\nimport { each, get, isFunction, isNumber, isString } from '@antv/util';\nimport { Datum, ShapeStyle, Statistic, StatisticText } from '../types';\nimport { kebabCase } from './kebab-case';\nimport { pick } from './pick';\n\n/**\n * @desc 生成 html-statistic 的 style 字符串 (兼容 canvas 的 shapeStyle 到 css样式上)\n *\n * @param width\n * @param style\n */\nexport function adapteStyle(style?: StatisticText['style']): object {\n  const styleObject = {\n    overflow: 'hidden',\n    'white-space': 'nowrap',\n    'text-overflow': 'ellipsis',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  };\n\n  const shapeStyleKeys = [\n    'stroke',\n    'lineWidth',\n    'shadowColor',\n    'strokeOpacity',\n    'shadowBlur',\n    'shadowOffsetX',\n    'shadowOffsetY',\n    'fill',\n  ];\n\n  // 兼容 shapeStyle 设置 · start\n  if (get(style, 'fill')) {\n    styleObject['color'] = style['fill'];\n  }\n  const {\n    shadowColor,\n    shadowBlur = 0,\n    shadowOffsetX = 0,\n    shadowOffsetY = 0,\n  } = pick(style, shapeStyleKeys) as ShapeStyle;\n  styleObject['text-shadow'] = `${[shadowColor, `${shadowOffsetX}px`, `${shadowOffsetY}px`, `${shadowBlur}px`].join(\n    ' '\n  )}`;\n\n  const { stroke, lineWidth = 0 } = pick(style, shapeStyleKeys) as ShapeStyle;\n  styleObject['-webkit-text-stroke'] = `${[`${lineWidth}px`, stroke].join(' ')}`;\n  // 兼容 shapeStyle 设置 · end\n\n  each(style, (v, k) => {\n    //  兼容 shapeStyle 的 fontSize 没有单位\n    if (['fontSize'].includes(k) && isNumber(v)) {\n      styleObject[kebabCase(k)] = `${v}px`;\n    } else if (k && !shapeStyleKeys.includes(k)) {\n      styleObject[kebabCase(k)] = `${v}`;\n    }\n  });\n\n  return styleObject;\n}\n\n/**\n * @desc 设置 html-statistic 容器的默认样式\n *\n * - 默认事件穿透\n */\nexport function setStatisticContainerStyle(container: HTMLElement, style: Partial<CSSStyleDeclaration>) {\n  container.style['pointer-events'] = 'none';\n  each(style, (v, k) => {\n    if (k && v) {\n      container.style[k] = v;\n    }\n  });\n}\n\n/**\n * 渲染环图 html-annotation（默认 position 居中 [50%, 50%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\nexport const renderStatistic = (chart: View, options: { statistic: Statistic; plotType: string }, datum?: Datum) => {\n  const { statistic, plotType } = options;\n  const { title: titleOpt, content: contentOpt } = statistic;\n\n  [titleOpt, contentOpt].forEach((option, idx) => {\n    if (!option) {\n      return;\n    }\n    let transform = '';\n    if (idx === 0) {\n      transform = contentOpt ? 'translate(-50%, -100%)' : 'translate(-50%, -50%)';\n    } else {\n      transform = titleOpt ? 'translate(-50%, 0)' : 'translate(-50%, -50%)';\n    }\n    const style = isFunction(option.style) ? option.style(datum) : option.style;\n\n    chart.annotation().html({\n      position: ['50%', '50%'],\n      html: (container, view) => {\n        const coordinate = view.getCoordinate();\n        let containerW = 0;\n        if (plotType === 'pie' || plotType === 'ring-progress') {\n          containerW = coordinate.getRadius() * coordinate.innerRadius * 2;\n        } else if (plotType === 'liquid') {\n          const liquidShape = get(view.geometries, [0, 'elements', 0, 'shape']);\n          if (liquidShape) {\n            // 获取到水波图边框大小\n            const path = (liquidShape as IGroup).find((t) => t.get('name') === 'wrap');\n            const { width } = path.getCanvasBBox();\n            containerW = width;\n          }\n        } else if (!containerW) {\n          // 保底方案\n          containerW = coordinate.getWidth();\n        }\n        setStatisticContainerStyle(container, {\n          width: `${containerW}px`,\n          transform,\n          // user's style setting has high priority\n          ...adapteStyle(style),\n        });\n\n        const filteredData = view.getData();\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n\n        let text = option.content;\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        }\n        // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n        return text ? (isString(text) ? text : `${text}`) : '<div></div>';\n      },\n      // @ts-ignore\n      key: `${idx === 0 ? 'top' : 'bottom'}-statistic`,\n      ...pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter']) /** 透传配置 */,\n    });\n  });\n};\n\n/**\n * 渲染 html-annotation for gauge (等不规则 plot), 默认 position 居中居底 [50%, 100%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\nexport const renderGaugeStatistic = (chart: View, options: { statistic: Statistic }, datum?: Datum) => {\n  const { statistic } = options;\n  const { title: titleOpt, content: contentOpt } = statistic;\n\n  [titleOpt, contentOpt].forEach((option) => {\n    if (!option) {\n      return;\n    }\n    const style = isFunction(option.style) ? option.style(datum) : option.style;\n    chart.annotation().html({\n      position: ['50%', '100%'],\n      html: (container, view) => {\n        const coordinate = view.getCoordinate();\n        // 弧形的坐标\n        const polarCoord = view.views[0].getCoordinate();\n        const polarCenter = polarCoord.getCenter();\n        const polarRadius = polarCoord.getRadius();\n        const polarMaxY = Math.max(Math.sin(polarCoord.startAngle), Math.sin(polarCoord.endAngle)) * polarRadius;\n        const offsetY = polarCenter.y + polarMaxY - coordinate.y.start - parseFloat(get(style, 'fontSize', 0));\n\n        const containerWidth = coordinate.getRadius() * coordinate.innerRadius * 2;\n        setStatisticContainerStyle(container, {\n          width: `${containerWidth}px`,\n          transform: `translate(-50%, ${offsetY}px)`,\n          // user's style setting has high priority\n          ...adapteStyle(style),\n        });\n\n        const filteredData = view.getData();\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n\n        let text = option.content;\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        }\n\n        // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n        return text ? (isString(text) ? text : `${text}`) : '<div></div>';\n      },\n      ...pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter']) /** 透传配置 */,\n    });\n  });\n};\n", "import { reduce } from '@antv/util';\n/**\n * 简单的模板引擎，使用方式如下（空格自动忽略）：\n * template('hello, {name}', { name: 'AntV' }); // hello, AntV\n * @param string\n * @param options\n */\nexport function template(source: string, data?: object): string {\n  if (!data) {\n    return source;\n  }\n  return reduce(\n    // @ts-ignore\n    data,\n    (r: string, v: string, k: string) => r.replace(new RegExp(`{\\\\s*${k}\\\\s*}`, 'g'), v),\n    source\n  );\n}\n", "import { Geometry, Types, View } from '@antv/g2';\nimport { each, isFunction } from '@antv/util';\nimport { Options } from '../types';\nimport { Animation } from '../types/animation';\n\n/**\n * 在 Chart 中查找特定 id 的子 View\n * @param chart\n * @param id\n */\nexport function findViewById(chart: View, id: string): View {\n  return chart.views.find((view: View) => view.id === id);\n}\n\n/**\n * 获取同 view 同一级的所有 views\n * @param view 当前 view\n * @returns 同一级的 views\n * @ignore\n */\nexport function getViews(view: View): View[] {\n  const parent = view.parent;\n  return parent ? parent.views : [];\n}\n\n/**\n * 获取同 view 同一级的 views，不包括自身\n * @param view 当前 view\n * @returns 同一级的 views\n * @ignore\n */\nexport function getSiblingViews(view: View): View[] {\n  return getViews(view).filter((sub) => sub !== view);\n}\n\n/**\n * 所有的 Geometries 都使用同一动画（各个图形如有区别，自行覆盖）并添加处理动画回调\n * @param view View\n * @param animation 动画配置\n */\nexport function addViewAnimation(\n  view: View,\n  animation: Options['animation'],\n  geometries: Geometry<Types.ShapePoint>[] = view.geometries\n) {\n  // 同时设置整个 view 动画选项\n  if (typeof animation === 'boolean') {\n    view.animate(animation);\n  } else {\n    view.animate(true);\n  }\n\n  // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n  each(geometries, (g: Geometry) => {\n    let animationCfg;\n    if (isFunction(animation)) {\n      animationCfg = animation(g.type || g.shapeType, g) || true;\n    } else {\n      animationCfg = animation;\n    }\n\n    g.animate(animationCfg as Animation);\n  });\n}\n", "export * from './data';\nexport { deepAssign } from './deep-assign';\nexport { getContainerSize } from './dom';\nexport { flow } from './flow';\nexport * from './geometry';\nexport { invariant, LEVEL, log } from './invariant';\nexport { kebabCase } from './kebab-case';\nexport { transformLabel } from './label';\nexport { measureTextWidth } from './measure-text';\nexport { isBetween, isRealNumber } from './number';\nexport * from './padding';\nexport { getSplinePath } from './path';\nexport { pick } from './pick';\nexport { renderGaugeStatistic, renderStatistic } from './statistic';\nexport { template } from './template';\nexport { addViewAnimation, findViewById, getSiblingViews, getViews } from './view';\n", "import { each } from '@antv/util';\n/**\n * @file 全局的一些变量定义：含国际化、主题...\n */\nexport const GLOBAL = {\n  /** 全局语言 */\n  locale: 'en-US',\n};\n\n/**\n * 全局变量设置\n * @param key\n * @param value\n */\nexport function setGlobal(datum: Record<string, any>): void {\n  each(datum, (v, k) => (GLOBAL[k] = v));\n}\n", "import { get } from '@antv/util';\nimport { Locale } from '../types/locale';\nimport { template } from '../utils';\nimport { GLOBAL } from './global';\n\nconst LocaleMap = {};\n\n/**\n * register a locale\n * @param locale\n * @param localeObj\n */\nexport function registerLocale(locale: string, localeObj: Locale) {\n  LocaleMap[locale] = localeObj;\n}\n\n/**\n * get locale of specific language\n * @param lang\n * @returns\n */\nexport function getLocale(locale: string) {\n  return {\n    get: (key: string | string[], obj?: Record<string, any>) => {\n      return template(\n        get(LocaleMap[locale], key) || get(LocaleMap[GLOBAL.locale], key) || get(LocaleMap['en-US'], key) || key,\n        obj\n      );\n    },\n  };\n}\n"],
  "mappings": "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",
  "names": ["LEVEL"]
}
